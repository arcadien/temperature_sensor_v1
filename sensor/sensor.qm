<?xml version="1.0" encoding="UTF-8"?>
<model version="4.6.0" links="0">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Sensor" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../3">
     <initial_glyph conn="96,11,4,0,5">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="DeepSleep">
     <entry>#ifdef TRACE
Serial.println(&quot;Enter Idle&quot;);
_delay_ms(30);
#endif

tinySensor.DeepSleep();

QACTIVE_POST(&amp;me-&gt;super, WAKEUP_SIG, 0U);</entry>
     <exit>#ifdef TRACE
Serial.println(&quot;Exit Idle&quot;);
_delay_ms(30);
#endif</exit>
     <tran trig="WAKEUP" target="../../3">
      <tran_glyph conn="71,21,1,3,13">
       <action box="3,-3,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="53,17,18,12">
      <entry box="1,2,6,2"/>
      <exit box="1,4,4,2"/>
     </state_glyph>
    </state>
    <state name="Sending">
     <entry brief="Transmit all sensors information">#ifdef TRACE
    Serial.println(F(&quot;Enter Sending&quot;));
    _delay_ms(30);
#endif

tinySensor.SendBatteryLevel();
tinySensor.SendTemperature();

QACTIVE_POST(&amp;me-&gt;super, SLEEP_SIG, 0U);</entry>
     <exit>#ifdef TRACE
    Serial.println(F(&quot;Exit Sending&quot;));
    _delay_ms(30);
#endif</exit>
     <tran trig="SLEEP" target="../../1">
      <tran_glyph conn="80,39,3,2,-24,-10">
       <action box="-18,-3,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="80,35,30,11">
      <entry box="1,2,26,3"/>
      <exit box="1,5,6,2"/>
     </state_glyph>
    </state>
    <state name="Sensing">
     <entry brief="Sense and save">#ifdef TRACE
  Serial.println(F(&quot;Enter Sensing&quot;));
  _delay_ms(30);
#endif

tinySensor.ReadTemperature();
tinySensor.ReadVcc();

QACTIVE_POST(&amp;me-&gt;super, DATA_READY_SIG, 0U);</entry>
     <exit>#ifdef TRACE
    Serial.println(F(&quot;Exit Sensing&quot;));
    _delay_ms(30);
#endif
</exit>
     <tran trig="DATA_READY" target="../../2">
      <tran_glyph conn="96,25,2,0,10">
       <action box="1,3,12,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="84,16,27,9">
      <entry box="1,2,23,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="147,82"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="sensor.ino" codec="UTF-8">
   <text>
#include &lt;avr/sleep.h&gt;
#include &lt;avr/wdt.h&gt;
#include &lt;TinySensor.h&gt;
#include &lt;LowPower.h&gt;

TinySensor tinySensor;

Q_DEFINE_THIS_MODULE(&quot;sensor&quot;)

//============================================================================
enum SensorSignals
{
    DATA_READY_SIG = Q_USER_SIG,
    SLEEP_SIG,
    WAKEUP_SIG,
};

$declare(AOs::Sensor)
$define(AOs::Sensor)

Sensor AO_Sensor;

//...................Interrupt handlers......................................
ISR(WDT_vect)
{
// just for wakeup. See DeepSleep state
}

#if defined(__AVR_ATmega32U4__)
ISR(TIMER3_COMPA_vect)
#elif defined(__AVR_ATmega328P__)
ISR(TIMER2_COMPA_vect)
#endif
{
    QF_tickXISR(0);
}

//............................................................................

// QF_active[] array defines all active object control blocks ----------------
static QEvt l_sensorQSto[10]; // Event queue storage for Sensor

QActiveCB const Q_ROM QF_active[] = {
    {(QActive *)0, (QEvt *)0, 0U},
    {(QActive *)&amp;AO_Sensor, l_sensorQSto, Q_DIM(l_sensorQSto)}};

//............................................................................
void setup()
{
    wdt_disable();
    tinySensor.Setup();

    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));
    QActive_ctor(&amp;AO_Sensor.super, Q_STATE_CAST(&amp;Sensor_initial));
}

//
void loop()
{
    // For now the QP framework does not work.
    // QF_run(); // run the QP-nano application

    for(;;)
    {
        tinySensor.ReadVcc();
        tinySensor.SendBatteryLevel();

        tinySensor.ReadTemperature();
        tinySensor.SendTemperature();

        tinySensor.DeepSleep();
    }


}

//============================================================================

// QF callbacks...
void QF_onStartup(void)
{

#ifdef TRACE
    Serial.println(F(&quot;Enter QF_onStartup&quot;));
    _delay_ms(30);
#endif

    tinySensor.SetupHeatbeat();

#ifdef TRACE
    Serial.println(F(&quot;Exit QF_onStartup&quot;));
    _delay_ms(30);
#endif

}

//............................................................................
void QV_onIdle(void)
{
    // called with interrupts DISABLED
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}

//............................................................................
void Q_onAssert(char const Q_ROM *const file, int line)
{

#ifdef TRACE
    // implement the error-handling policy for your application!!!
    Serial.print(F(&quot;Assertion:&quot;));
    Serial.print(file);
    Serial.print(F(&quot;' at line&quot;));
    Serial.print(line, DEC);

    _delay_ms(1000);

#endif
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();       // reset the CPU
}</text>
  </file>
 </directory>
</model>
