/*****************************************************************************
* Model: sensor.qm
* File:  ./sensor.ino
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::sensor.ino} .........................................................*/
#define ISR_HACK 1

#include "qpn.h"        // QP-nano framework
#include "Arduino.h"    // Arduino API
#include "Manchester.h" // 433Mhz transmission library

//#include <avr/sleep.h>

Q_DEFINE_THIS_MODULE("sensor")




// define to println() many information
//#define TRACE 1

enum {
    BSP_TICKS_PER_SEC = 100,  // number of system clock ticks in one second
    LED_PIN           = 13,  // the pin number of the on-board LED
    PERIPH_VCC_PIN    = 10,  // the pin number which activates the vcc rail for peripherals (emitter, sensors)
    SENSOR_COUNT      = 1,   // How many sensors do we have, ie how many data row to send

    /*
    * The length (bytes) of each sensor data.
    *
    * [MESSAGE_SIZE, DEV_ID, SENSOR_ID, SENSOR_BYTE_1, SENSOR_BYTE_2]
    *
    */
    MESSAGE_SIZE      = 5
};

// protocol definition, should
// be shared with receiver
enum {
    MESSAGE_SIZE_POS,
    DEV_ID_POS,
    SENSOR_ID_POS,
    SENSOR_BYTE_1_POS,
    SENSOR_BYTE_2_POS
};

uint8_t TEMP_SENSOR_ID= 0x0;

// ------------

// THIS sensor config
#define SENSOR_COUNT 1

// pin where temp sensor is wired

// some constant for temperature sensor
#define ANALOG_TEMP_SENSOR_PIN A0
const uint8_t TEMP_SAMPLE_COUNT = 10;

// constants for 433Mhz emitter
#define TX_PIN  5 //pin where your transmitter is connected

//============================================================================
enum SensorSignals {
    SEND_DATA_SIG = Q_USER_SIG,
    EMISSION_FINISHED_SIG,
    SLEEP_SIG,
    WAKEUP_SIG,

};


#if ((QP_VERSION < 591) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.9.1 or higher required
#endif

/*${AOs::Sensor} ...........................................................*/
typedef struct Sensor {
/* protected: */
    QActive super;

/* private: */
    uint8_t sensor_data[SENSOR_COUNT][MESSAGE_SIZE];
} Sensor;

/* protected: */
static QState Sensor_initial(Sensor * const me);
static QState Sensor_Active(Sensor * const me);
static QState Sensor_TempSensing(Sensor * const me);
static QState Sensor_Emitting(Sensor * const me);
static QState Sensor_Sleeping(Sensor * const me);

/*${AOs::Sensor} ...........................................................*/
/*${AOs::Sensor::SM} .......................................................*/
static QState Sensor_initial(Sensor * const me) {
    /* ${AOs::Sensor::SM::initial} */
    return Q_TRAN(&Sensor_Sleeping);
}
/*${AOs::Sensor::SM::Active} ...............................................*/
static QState Sensor_Active(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Active} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
              Serial.println("Enter Active");
            #endif

            digitalWrite(PERIPH_VCC_PIN, 1);
            digitalWrite(LED_PIN, 1);

            // http://www.ti.com/lit/ds/symlink/lm35.pdf p.12
            // (startup response)
            delay(30);

            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active} */
        case Q_EXIT_SIG: {
            #ifdef TRACE
                Serial.println("Exit Active");
            #endif
            digitalWrite(LED_PIN, 0);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Sensor_TempSensing);
            break;
        }
        /* ${AOs::Sensor::SM::Active::SLEEP} */
        case SLEEP_SIG: {
            status_ = Q_TRAN(&Sensor_Sleeping);
            break;
        }
        /* ${AOs::Sensor::SM::Active::SEND_DATA} */
        case SEND_DATA_SIG: {
            status_ = Q_TRAN(&Sensor_Emitting);
            break;
        }
        /* ${AOs::Sensor::SM::Active::EMISSION_FINISHED} */
        case EMISSION_FINISHED_SIG: {
            QACTIVE_POST(&me->super, SLEEP_SIG, me->super.prio);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Sensor::SM::Active::TempSensing} ..................................*/
static QState Sensor_TempSensing(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Active::TempSensing} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
              Serial.println(F("Enter TempSensing"));
            #endif

            double analogVal = 0;
            int sample = 0;

            // first read is usually false
            // make a blank read
            analogRead(ANALOG_TEMP_SENSOR_PIN);

            // message length is fixed
            me->sensor_data[TEMP_SENSOR_ID][MESSAGE_SIZE_POS] = MESSAGE_SIZE;

            for (uint8_t j = 0 ; j < TEMP_SAMPLE_COUNT ; ++j)
            {
              sample = analogRead(ANALOG_TEMP_SENSOR_PIN);    // Each sample is a value from 0 to 1023. Reading "j" values will help making the reading more accurate.
              analogVal = analogVal + sample;
            }

            analogVal = analogVal / TEMP_SAMPLE_COUNT;

            // see https://playground.arduino.cc/Main/LM35HigherResolution
            // we divide the factor by 10 more to avoid a multiplication per 10
            // before rounding for i_temp, below
            // the value is adjusted with Aref value for each sensor module.
            //
            // Node 0 : 1.0.87v
            //
            analogVal = analogVal / 0.9568;

            // fix value by calibration
            //analogVal = analogVal * span + offset;

            // rounding and split decimal part
            // analogVal 263.90
            int i_temp = round(analogVal); // temp is int plus one decimal (ie raw 263.90 => 264)
            me->sensor_data[TEMP_SENSOR_ID][SENSOR_BYTE_1_POS] = round(i_temp / 10); // ie 26 in this sample
            me->sensor_data[TEMP_SENSOR_ID][SENSOR_BYTE_2_POS] = round(i_temp % 10); // ie 4 in this sample

            Serial.print(me->sensor_data[TEMP_SENSOR_ID][SENSOR_BYTE_1_POS]);
            Serial.print(F("."));
            Serial.print(me->sensor_data[TEMP_SENSOR_ID][SENSOR_BYTE_2_POS]);
            Serial.println(F(" Â°C"));

            digitalWrite(LED_PIN, 0);

            QACTIVE_POST(&me->super, SEND_DATA_SIG, me->super.prio);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active::TempSensing} */
        case Q_EXIT_SIG: {
            #ifdef TRACE
                Serial.println(F("Exit TempSensing"));
            #endif

            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Sensor_Active);
            break;
        }
    }
    return status_;
}
/*${AOs::Sensor::SM::Active::Emitting} .....................................*/
static QState Sensor_Emitting(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Active::Emitting} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
                Serial.println(F("Enter Emitting"));
            #endif

            man.transmitArray(me->sensor_data[0][0], me->sensor_data[0]);
            delay(10);

            man.transmitArray(me->sensor_data[0][0], me->sensor_data[0]);
            delay(10);

            man.transmitArray(me->sensor_data[0][0], me->sensor_data[0]);
            delay(10);

            QACTIVE_POST(&me->super, EMISSION_FINISHED_SIG, me->super.prio);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active::Emitting} */
        case Q_EXIT_SIG: {
            // not needed in transmit mode
            // QACTIVE_POST(AO_Timer, QP_CLOCK, AO_Timer.prio);

            #ifdef TRACE
                Serial.println(F("Exit Emitting"));
            #endif
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Sensor_Active);
            break;
        }
    }
    return status_;
}
/*${AOs::Sensor::SM::Sleeping} .............................................*/
static QState Sensor_Sleeping(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Sleeping} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
                Serial.println("Enter Sleeping");
            #endif
            digitalWrite(PERIPH_VCC_PIN, 0);
            QActive_armX(&me->super, 0U, BSP_TICKS_PER_SEC*5U, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Sleeping} */
        case Q_EXIT_SIG: {
            #ifdef TRACE
                Serial.println("Exit Sleeping");
            #endif
            QActive_disarmX(&me->super, 0U);

            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Sleeping::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Sensor_Active);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}


Sensor AO_Sensor;

// QF_active[] array defines all active object control blocks ----------------
static QEvt l_sensorQSto[10]; // Event queue storage for Sensor

QActiveCB const Q_ROM QF_active[] = {
  { (QActive *)0,           (QEvt *)0,        0U                  },
  { (QActive *)&AO_Sensor,  l_sensorQSto,     Q_DIM(l_sensorQSto) }
};

void PrintSensorData()
{
    Serial.println(F("Temp sensor data: "));
    Serial.print("Size: ") ; Serial.println(AO_Sensor.sensor_data[TEMP_SENSOR_ID][MESSAGE_SIZE_POS]);
    Serial.print("Dev. Id: ") ; Serial.println(AO_Sensor.sensor_data[TEMP_SENSOR_ID][DEV_ID_POS]);
    Serial.print("Sensor Id: ") ; Serial.println(AO_Sensor.sensor_data[TEMP_SENSOR_ID][SENSOR_ID_POS]);
    Serial.print("First byte: ") ; Serial.println(AO_Sensor.sensor_data[TEMP_SENSOR_ID][SENSOR_BYTE_1_POS]);
    Serial.print("Second byte: ") ; Serial.println(AO_Sensor.sensor_data[TEMP_SENSOR_ID][SENSOR_BYTE_2_POS]);

}

void PrintInfo()
{
    Serial.print(F("QP-nano: "));
    Serial.println(F(QP_VERSION_STR));

    Serial.print("CPU Freq: ");
    Serial.print(F_CPU / 1000000);
    Serial.println("Mhz");

    Serial.print("State machine ticks/s: ");
    Serial.println(BSP_TICKS_PER_SEC);

    Serial.print("433Mhz baud rate: ");
    Serial.print("MAN_4800");
    Serial.println("bps");
}

//............................................................................
void setup() {

    analogReference(INTERNAL);

    pinMode(LED_PIN, OUTPUT);        // set the LED-PIN pin to output
    digitalWrite(LED_PIN, 0);

    pinMode(PERIPH_VCC_PIN, OUTPUT);
    digitalWrite(PERIPH_VCC_PIN, 0);

    man.setupTransmit(TX_PIN, MAN_4800);

    Serial.begin(57600);   // set the highest stanard baud rate of 115200 bps (mini pro uses x2)

    PrintInfo();

    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));
    QActive_ctor(&AO_Sensor.super, Q_STATE_CAST(&Sensor_initial));

}

//
void loop() {
    QF_run(); // run the QP-nano application
}

ISR(TIMER2_COMPA_vect) {
    if (Serial.available() > 0) {
        switch (Serial.read()) { // read the incoming byte
            case 'p':
            case 'P':
            {
               PrintInfo();
               break;
            }
            case 'd':
            case 'D':
            {
               PrintSensorData();
               break;
            }
       }
    }

    QF_tickXISR(0);

}

//============================================================================

// QF callbacks...
void QF_onStartup(void) {

#ifdef TRACE
    Serial.println(F("QF_onStartup"));
#endif

    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U << WGM21) | (0U << WGM20);
    TCCR2B = (1U << CS22 ) | (1U << CS21) | (1U << CS20); // 1/2^10
    ASSR  &= ~(1U << AS2);
    TIMSK2 = (1U << OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED

#ifdef TRACE
    //Serial.println(F("QV_onIdle"));
#endif

    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}

//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {

#ifdef TRACE
    // implement the error-handling policy for your application!!!
    Serial.print(F("Assertion raised in '"));
    Serial.print(file);
    Serial.print(F("' at line"));
    Serial.print(line);
#endif
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}
